<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.2.2 (Python 3.8.8 on win32)" generated="20210323 14:36:16.861" rpa="false">
<suite id="s1" name="DB testing" source="C:\Users\anand\PycharmProjects\seleniumProject\TestCases\DB_testing.robot">
<kw name="Connect To Database" library="DatabaseLibrary" type="setup">
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using `dbName`, `dbUsername`, and `dbPassword`.</doc>
<arguments>
<arg>pymysql</arg>
<arg>${DBName}</arg>
<arg>${DBUser}</arg>
<arg>${DBPass}</arg>
<arg>${DBHost}</arg>
<arg>${DBPort}</arg>
</arguments>
<msg timestamp="20210323 14:36:16.963" level="INFO">Connecting using : pymysql.connect(db=TEST, user=root, passwd=Welcome@123, host=127.0.0.1, port=3306, charset=None) </msg>
<status status="PASS" starttime="20210323 14:36:16.937" endtime="20210323 14:36:16.980"></status>
</kw>
<test id="s1-t1" name="Create person table">
<kw name="Execute Sql String" library="DatabaseLibrary">
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>create table person(id integer,firstname varchar(20),lastname varchar(20));</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210323 14:36:16.981" level="INFO">Executing : Execute SQL String  |  create table person(id integer,firstname varchar(20),lastname varchar(20)); </msg>
<msg timestamp="20210323 14:36:17.686" level="INFO">${output} = None</msg>
<status status="PASS" starttime="20210323 14:36:16.981" endtime="20210323 14:36:17.686"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" starttime="20210323 14:36:17.688" endtime="20210323 14:36:17.689"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${output}</arg>
<arg>None</arg>
</arguments>
<msg timestamp="20210323 14:36:17.693" level="INFO">Argument types are:
&lt;class 'NoneType'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210323 14:36:17.692" endtime="20210323 14:36:17.694"></status>
</kw>
<status status="PASS" starttime="20210323 14:36:16.980" endtime="20210323 14:36:17.695" critical="yes"></status>
</test>
<test id="s1-t2" name="Inserting Data in person table">
<kw name="Execute Sql Script" library="DatabaseLibrary">
<doc>Executes the content of the `sqlScriptFileName` as SQL commands. Useful for setting the database to a known
state before running your tests, or clearing out your test data after running each a test. Set optional input
`sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>./TestData/insertdata.sql</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210323 14:36:17.703" level="INFO">Executing : Execute SQL Script  |  ./TestData/insertdata.sql </msg>
<msg timestamp="20210323 14:36:18.017" level="INFO">${output} = None</msg>
<status status="PASS" starttime="20210323 14:36:17.702" endtime="20210323 14:36:18.017"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" starttime="20210323 14:36:18.018" endtime="20210323 14:36:18.018"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${output}</arg>
<arg>None</arg>
</arguments>
<msg timestamp="20210323 14:36:18.019" level="INFO">Argument types are:
&lt;class 'NoneType'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210323 14:36:18.019" endtime="20210323 14:36:18.019"></status>
</kw>
<status status="PASS" starttime="20210323 14:36:17.699" endtime="20210323 14:36:18.020" critical="yes"></status>
</test>
<test id="s1-t3" name="check tamil is present in the person table">
<kw name="Check If Exists In Database" library="DatabaseLibrary">
<doc>Check if any row would be returned by given the input `selectStatement`. If there are no results, then this will
throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit transaction
commit or rollback.</doc>
<arguments>
<arg>select * from test.person where firstname="tamil";</arg>
</arguments>
<msg timestamp="20210323 14:36:18.022" level="INFO">Executing : Check If Exists In Database  |  select * from test.person where firstname="tamil"; </msg>
<msg timestamp="20210323 14:36:18.022" level="INFO">Executing : Query  |  select * from test.person where firstname="tamil"; </msg>
<status status="PASS" starttime="20210323 14:36:18.022" endtime="20210323 14:36:18.023"></status>
</kw>
<status status="PASS" starttime="20210323 14:36:18.021" endtime="20210323 14:36:18.023" critical="yes"></status>
</test>
<test id="s1-t4" name="check rose is not present in databases">
<kw name="Check If Not Exists In Database" library="DatabaseLibrary">
<doc>This is the negation of `check_if_exists_in_database`.</doc>
<arguments>
<arg>select * from test.person where firstname="rose";</arg>
</arguments>
<msg timestamp="20210323 14:36:18.026" level="INFO">Executing : Check If Not Exists In Database  |  select * from test.person where firstname="rose"; </msg>
<msg timestamp="20210323 14:36:18.026" level="INFO">Executing : Query  |  select * from test.person where firstname="rose"; </msg>
<status status="PASS" starttime="20210323 14:36:18.026" endtime="20210323 14:36:18.027"></status>
</kw>
<status status="PASS" starttime="20210323 14:36:18.025" endtime="20210323 14:36:18.027" critical="yes"></status>
</test>
<test id="s1-t5" name="check person table exsist in database">
<kw name="Table Must Exist" library="DatabaseLibrary">
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<arguments>
<arg>person</arg>
</arguments>
<msg timestamp="20210323 14:36:18.029" level="INFO">Executing : Table Must Exist  |  person </msg>
<msg timestamp="20210323 14:36:18.029" level="INFO">Executing : Row Count  |  SELECT * FROM information_schema.tables WHERE table_name='person' </msg>
<status status="PASS" starttime="20210323 14:36:18.029" endtime="20210323 14:36:18.205"></status>
</kw>
<status status="PASS" starttime="20210323 14:36:18.028" endtime="20210323 14:36:18.206" critical="yes"></status>
</test>
<test id="s1-t6" name="Verify row count as 0">
<kw name="Row Count Is 0" library="DatabaseLibrary">
<doc>Check if any rows are returned from the submitted `selectStatement`. If there are, then this will throw an
AssertionError. Set optional input `sansTran` to True to run command without an explicit transaction commit or
rollback.</doc>
<arguments>
<arg>select * from test.person where firstname="tamil1";</arg>
</arguments>
<msg timestamp="20210323 14:36:18.209" level="INFO">Executing : Row Count Is 0  |  select * from test.person where firstname="tamil1"; </msg>
<msg timestamp="20210323 14:36:18.210" level="INFO">Executing : Row Count  |  select * from test.person where firstname="tamil1"; </msg>
<status status="PASS" starttime="20210323 14:36:18.209" endtime="20210323 14:36:18.211"></status>
</kw>
<status status="PASS" starttime="20210323 14:36:18.208" endtime="20210323 14:36:18.211" critical="yes"></status>
</test>
<test id="s1-t7" name="Verify row count is equal to some value">
<kw name="Row Count Is Equal To X" library="DatabaseLibrary">
<doc>Check if the number of rows returned from `selectStatement` is equal to the value submitted. If not, then this
will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit
transaction commit or rollback.</doc>
<arguments>
<arg>select * from test.person where firstname="tamil";</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20210323 14:36:18.214" level="INFO">Executing : Row Count Is Equal To X  |  select * from test.person where firstname="tamil";  |  1 </msg>
<msg timestamp="20210323 14:36:18.214" level="INFO">Executing : Row Count  |  select * from test.person where firstname="tamil"; </msg>
<status status="PASS" starttime="20210323 14:36:18.213" endtime="20210323 14:36:18.215"></status>
</kw>
<status status="PASS" starttime="20210323 14:36:18.212" endtime="20210323 14:36:18.215" critical="yes"></status>
</test>
<test id="s1-t8" name="Verify row count is greater than equal to some value">
<kw name="Row Count Is Greater Than X" library="DatabaseLibrary">
<doc>Check if the number of rows returned from `selectStatement` is greater than the value submitted. If not, then
this will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit
transaction commit or rollback.</doc>
<arguments>
<arg>select * from test.person where firstname="tamil";</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20210323 14:36:18.219" level="INFO">Executing : Row Count Is Greater Than X  |  select * from test.person where firstname="tamil";  |  0 </msg>
<msg timestamp="20210323 14:36:18.219" level="INFO">Executing : Row Count  |  select * from test.person where firstname="tamil"; </msg>
<status status="PASS" starttime="20210323 14:36:18.219" endtime="20210323 14:36:18.221"></status>
</kw>
<status status="PASS" starttime="20210323 14:36:18.217" endtime="20210323 14:36:18.221" critical="yes"></status>
</test>
<test id="s1-t9" name="update record from the table">
<kw name="Execute Sql String" library="DatabaseLibrary">
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>update TEST.person set firstname="dhinu" where lastname="kala";</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210323 14:36:18.225" level="INFO">Executing : Execute SQL String  |  update TEST.person set firstname="dhinu" where lastname="kala"; </msg>
<msg timestamp="20210323 14:36:18.441" level="INFO">${output} = None</msg>
<status status="PASS" starttime="20210323 14:36:18.225" endtime="20210323 14:36:18.441"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" starttime="20210323 14:36:18.443" endtime="20210323 14:36:18.445"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${output}</arg>
<arg>None</arg>
</arguments>
<msg timestamp="20210323 14:36:18.447" level="INFO">Argument types are:
&lt;class 'NoneType'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210323 14:36:18.446" endtime="20210323 14:36:18.447"></status>
</kw>
<status status="PASS" starttime="20210323 14:36:18.224" endtime="20210323 14:36:18.449" critical="yes"></status>
</test>
<test id="s1-t10" name="retrieve all the records from the table">
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>select * from TEST.person;</arg>
</arguments>
<assign>
<var>@{queryresults}</var>
</assign>
<msg timestamp="20210323 14:36:18.454" level="INFO">Executing : Query  |  select * from TEST.person; </msg>
<msg timestamp="20210323 14:36:18.457" level="INFO">@{queryresults} = [ (100, 'kalai', 'selvi') | (101, 'dhinu', 'kala') | (102, 'tamil', 'kalai') ]</msg>
<status status="PASS" starttime="20210323 14:36:18.454" endtime="20210323 14:36:18.457"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>many @{queryresults}</arg>
</arguments>
<status status="PASS" starttime="20210323 14:36:18.458" endtime="20210323 14:36:18.459"></status>
</kw>
<status status="PASS" starttime="20210323 14:36:18.452" endtime="20210323 14:36:18.461" critical="yes"></status>
</test>
<test id="s1-t11" name="delete the data from table">
<kw name="Execute Sql String" library="DatabaseLibrary">
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>delete from TEST.person;</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210323 14:36:18.466" level="INFO">Executing : Execute SQL String  |  delete from TEST.person; </msg>
<msg timestamp="20210323 14:36:18.756" level="INFO">${output} = None</msg>
<status status="PASS" starttime="20210323 14:36:18.466" endtime="20210323 14:36:18.756"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" starttime="20210323 14:36:18.759" endtime="20210323 14:36:18.761"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${output}</arg>
<arg>None</arg>
</arguments>
<msg timestamp="20210323 14:36:18.764" level="INFO">Argument types are:
&lt;class 'NoneType'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210323 14:36:18.763" endtime="20210323 14:36:18.764"></status>
</kw>
<status status="PASS" starttime="20210323 14:36:18.464" endtime="20210323 14:36:18.765" critical="yes"></status>
</test>
<test id="s1-t12" name="delete table from database">
<kw name="Execute Sql String" library="DatabaseLibrary">
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>drop table TEST.person;</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20210323 14:36:18.772" level="INFO">Executing : Execute SQL String  |  drop table TEST.person; </msg>
<msg timestamp="20210323 14:36:19.466" level="INFO">${output} = None</msg>
<status status="PASS" starttime="20210323 14:36:18.771" endtime="20210323 14:36:19.466"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" starttime="20210323 14:36:19.468" endtime="20210323 14:36:19.469"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${output}</arg>
<arg>None</arg>
</arguments>
<msg timestamp="20210323 14:36:19.471" level="INFO">Argument types are:
&lt;class 'NoneType'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210323 14:36:19.470" endtime="20210323 14:36:19.471"></status>
</kw>
<status status="PASS" starttime="20210323 14:36:18.769" endtime="20210323 14:36:19.472" critical="yes"></status>
</test>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="teardown">
<doc>Disconnects from the database.</doc>
<msg timestamp="20210323 14:36:19.478" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20210323 14:36:19.478" endtime="20210323 14:36:19.479"></status>
</kw>
<status status="PASS" starttime="20210323 14:36:16.865" endtime="20210323 14:36:19.479"></status>
</suite>
<statistics>
<total>
<stat pass="12" fail="0">Critical Tests</stat>
<stat pass="12" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="12" fail="0" id="s1" name="DB testing">DB testing</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
